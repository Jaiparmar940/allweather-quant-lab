[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "omega-portfolio-engine"
version = "0.1.0"
description = "Regime-aware, client-customizable portfolio optimization engine"
authors = ["Omega Team <team@omega.com>"]
readme = "README.md"
packages = [{include = "engine"}]

[tool.poetry.dependencies]
python = "^3.11"
numpy = "^1.24.0"
pandas = "^2.0.0"
scipy = "^1.10.0"
scikit-learn = "^1.3.0"
statsmodels = "^0.14.0"
cvxpy = "^1.3.0"
optuna = "^3.3.0"
hmmlearn = "^0.3.0"
torch = "^2.0.0"
yfinance = "^0.2.0"
fredapi = "^0.5.0"
requests = "^2.31.0"
pydantic = "^2.0.0"
fastapi = {version = "^0.100.0", optional = true}
uvicorn = {version = "^0.23.0", optional = true}
streamlit = {version = "^1.25.0", optional = true}
mlflow = "^2.5.0"
reportlab = "^4.0.0"
matplotlib = "^3.7.0"
seaborn = "^0.12.0"
plotly = "^5.15.0"
structlog = "^23.1.0"
pyyaml = "^6.0"
python-dotenv = "^1.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.0"
ruff = "^0.0.280"
black = "^23.7.0"
mypy = "^1.5.0"
pre-commit = "^3.3.0"
jupyter = "^1.0.0"
ipykernel = "^6.25.0"

[tool.poetry.extras]
api = ["fastapi", "uvicorn"]
ui = ["streamlit"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
line-length = 88
target-version = ['py311']

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=engine",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
